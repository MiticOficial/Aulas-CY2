{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "eb2206f7-0cd2-4373-92e4-a3c83d938f62",
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "\n",
    "this_python = sys.version_info[:2]\n",
    "min_version = (3, 8)\n",
    "if this_python < min_version:\n",
    "    message_parts = [\n",
    "        \"This script does not work on Python {}.{}.\".format(*this_python),\n",
    "        \"The minimum supported Python version is {}.{}.\".format(*min_version),\n",
    "        \"Please use https://bootstrap.pypa.io/pip/{}.{}/get-pip.py instead.\".format(*this_python),\n",
    "    ]\n",
    "    print(\"ERROR: \" + \" \".join(message_parts))\n",
    "    sys.exit(1)\n",
    "\n",
    "\n",
    "import os.path\n",
    "import pkgutil\n",
    "import shutil\n",
    "import tempfile\n",
    "import argparse\n",
    "import importlib\n",
    "from base64 import b85decode\n",
    "\n",
    "\n",
    "def include_setuptools(args):\n",
    "    \"\"\"\n",
    "    Install setuptools only if absent, not excluded and when using Python <3.12.\n",
    "    \"\"\"\n",
    "    cli = not args.no_setuptools\n",
    "    env = not os.environ.get(\"PIP_NO_SETUPTOOLS\")\n",
    "    absent = not importlib.util.find_spec(\"setuptools\")\n",
    "    python_lt_3_12 = this_python < (3, 12)\n",
    "    return cli and env and absent and python_lt_3_12\n",
    "\n",
    "\n",
    "def include_wheel(args):\n",
    "    \"\"\"\n",
    "    Install wheel only if absent, not excluded and when using Python <3.12.\n",
    "    \"\"\"\n",
    "    cli = not args.no_wheel\n",
    "    env = not os.environ.get(\"PIP_NO_WHEEL\")\n",
    "    absent = not importlib.util.find_spec(\"wheel\")\n",
    "    python_lt_3_12 = this_python < (3, 12)\n",
    "    return cli and env and absent and python_lt_3_12\n",
    "\n",
    "\n",
    "def determine_pip_install_arguments():\n",
    "    pre_parser = argparse.ArgumentParser()\n",
    "    pre_parser.add_argument(\"--no-setuptools\", action=\"store_true\")\n",
    "    pre_parser.add_argument(\"--no-wheel\", action=\"store_true\")\n",
    "    pre, args = pre_parser.parse_known_args()\n",
    "\n",
    "    args.append(\"pip\")\n",
    "\n",
    "    if include_setuptools(pre):\n",
    "        args.append(\"setuptools\")\n",
    "\n",
    "    if include_wheel(pre):\n",
    "        args.append(\"wheel\")\n",
    "\n",
    "    return [\"install\", \"--upgrade\", \"--force-reinstall\"] + args\n",
    "\n",
    "\n",
    "def monkeypatch_for_cert(tmpdir):\n",
    "    \"\"\"Patches `pip install` to provide default certificate with the lowest priority.\n",
    "\n",
    "    This ensures that the bundled certificates are used unless the user specifies a\n",
    "    custom cert via any of pip's option passing mechanisms (config, env-var, CLI).\n",
    "\n",
    "    A monkeypatch is the easiest way to achieve this, without messing too much with\n",
    "    the rest of pip's internals.\n",
    "    \"\"\"\n",
    "    from pip._internal.commands.install import InstallCommand\n",
    "\n",
    "    # We want to be using the internal certificates.\n",
    "    cert_path = os.path.join(tmpdir, \"cacert.pem\")\n",
    "    with open(cert_path, \"wb\") as cert:\n",
    "        cert.write(pkgutil.get_data(\"pip._vendor.certifi\", \"cacert.pem\"))\n",
    "\n",
    "    install_parse_args = InstallCommand.parse_args\n",
    "\n",
    "    def cert_parse_args(self, args):\n",
    "        if not self.parser.get_default_values().cert:\n",
    "            # There are no user provided cert -- force use of bundled cert\n",
    "            self.parser.defaults[\"cert\"] = cert_path  # calculated above\n",
    "        return install_parse_args(self, args)\n",
    "\n",
    "    InstallCommand.parse_args = cert_parse_args\n",
    "\n",
    "\n",
    "def bootstrap(tmpdir):\n",
    "    monkeypatch_for_cert(tmpdir)\n",
    "\n",
    "    # Execute the included pip and use it to install the latest pip and\n",
    "    # any user-requested packages from PyPI.\n",
    "    from pip._internal.cli.main import main as pip_entry_point\n",
    "    args = determine_pip_install_arguments()\n",
    "    sys.exit(pip_entry_point(args))\n",
    "\n",
    "\n",
    "def main():\n",
    "    tmpdir = None\n",
    "    try:\n",
    "        # Create a temporary working directory\n",
    "        tmpdir = tempfile.mkdtemp()\n",
    "\n",
    "        # Unpack the zipfile into the temporary directory\n",
    "        pip_zip = os.path.join(tmpdir, \"pip.zip\")\n",
    "        with open(pip_zip, \"wb\") as fp:\n",
    "            fp.write(b85decode(DATA.replace(b\"\\n\", b\"\")))\n",
    "\n",
    "        # Add the zipfile to sys.path so that we can import it\n",
    "        sys.path.insert(0, pip_zip)\n",
    "\n",
    "        # Run the bootstrap\n",
    "        bootstrap(tmpdir=tmpdir)\n",
    "    finally:\n",
    "        # Clean up our temporary working directory\n",
    "        if tmpdir:\n",
    "            shutil.rmtree(tmpdir, ignore_errors=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1332448b-6a08-4599-9085-2c97cbd532e0",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
